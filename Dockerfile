# syntax = docker/dockerfile:experimental

# Define build arguments for PHP and Node.js versions
ARG PHP_VERSION=8.2
ARG NODE_VERSION=18

# Base image: Set up PHP environment
FROM ubuntu:22.04 as base
LABEL fly_launch_runtime="laravel"

# Arguments and environment variables
ARG PHP_VERSION
ENV DEBIAN_FRONTEND=noninteractive \
    COMPOSER_ALLOW_SUPERUSER=1 \
    PHP_DATE_TIMEZONE=UTC \
    PHP_MEMORY_LIMIT=256M \
    PHP_MAX_EXECUTION_TIME=90 \
    PHP_POST_MAX_SIZE=100M \
    PHP_UPLOAD_MAX_FILE_SIZE=100M

# Prepare the base container
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer
COPY .fly/php/ondrej_ubuntu_php.gpg /etc/apt/trusted.gpg.d/ondrej_ubuntu_php.gpg
ADD .fly/php/packages/${PHP_VERSION}.txt /tmp/php-packages.txt

RUN apt-get update \
    && apt-get install -y --no-install-recommends gnupg2 ca-certificates git curl zip unzip \
       rsync vim-tiny sqlite3 nginx supervisor cron \
    && echo "deb http://ppa.launchpad.net/ondrej/php/ubuntu jammy main" > /etc/apt/sources.list.d/ondrej-php.list \
    && apt-get update \
    && apt-get -y --no-install-recommends install $(cat /tmp/php-packages.txt) \
    && ln -sf /usr/sbin/php-fpm${PHP_VERSION} /usr/sbin/php-fpm \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/*

# Set up working directory and copy configuration files
WORKDIR /var/www/html
COPY .fly/nginx/ /etc/nginx/
COPY .fly/fpm/ /etc/php/${PHP_VERSION}/fpm/
COPY .fly/supervisor/ /etc/supervisor/
COPY .fly/entrypoint.sh /entrypoint
RUN chmod +x /entrypoint

# Copy application code and install dependencies
COPY . /var/www/html
RUN composer install --optimize-autoloader --no-dev \
    && mkdir -p storage/logs bootstrap/cache \
    && chown -R www-data:www-data /var/www/html \
    && php artisan optimize:clear \
    && echo "MAILTO=\"\"\n* * * * * www-data /usr/bin/php /var/www/html/artisan schedule:run" > /etc/cron.d/laravel

# Multi-stage build: Node.js environment for building static assets
FROM node:${NODE_VERSION} as node_modules_go_brrr

WORKDIR /app
COPY . .
COPY --from=base /var/www/html/vendor /app/vendor

RUN if [ -f "vite.config.js" ]; then \
        ASSET_CMD="build"; \
    else \
        ASSET_CMD="production"; \
    fi; \
    if [ -f "yarn.lock" ]; then \
        yarn install --frozen-lockfile && yarn $ASSET_CMD; \
    elif [ -f "pnpm-lock.yaml" ]; then \
        corepack enable && corepack prepare pnpm@latest-8 --activate; \
        pnpm install --frozen-lockfile && pnpm run $ASSET_CMD; \
    elif [ -f "package-lock.json" ]; then \
        npm ci --no-audit && npm run $ASSET_CMD; \
    else \
        npm install && npm run $ASSET_CMD; \
    fi;

# Final stage: Assemble the production image
FROM base

# Merge static assets generated by Node.js
COPY --from=node_modules_go_brrr /app/public /var/www/html/public
RUN chown -R www-data:www-data /var/www/html/public

# Expose necessary ports and set entrypoint
EXPOSE 8080
ENTRYPOINT ["/entrypoint"]
